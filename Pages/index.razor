@page "/"
@inject FinanceContext DbContext

<h3>Dashboard</h3>

<!-- Total Balance Section -->
<div class="card mb-4">
    <div class="card-header">
        <strong>Total Balance</strong>
    </div>
    <div class="card-body">
        <h4 class="card-title">@totalBalance.ToString("C")</h4>
    </div>
</div>

<!-- Recent Transactions Section -->
<div class="card">
    <div class="card-header">
        <strong>Recent Transactions</strong>
    </div>
    <div class="card-body">
        @if (recentTransactions == null)
        {
            <p>Loading...</p>
        }
        else if (!recentTransactions.Any())
        {
            <p>No transactions found.</p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Account</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in recentTransactions)
                    {
                        <tr>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Description</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@GetAccountName(transaction.AccountId)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private decimal totalBalance;
    private List<Transaction> recentTransactions;
    private List<Account> accounts;

    protected override async Task OnInitializedAsync()
    {
        // Fetch accounts and transactions from the database
        accounts = await DbContext.Accounts.ToListAsync();
        recentTransactions = await DbContext.Transactions
            .OrderByDescending(t => t.Date)
            .Take(10) // Show the last 10 transactions
            .ToListAsync();

        // Calculate total balance
        totalBalance = accounts.Sum(a => a.Balance);
    }

    private string GetAccountName(int accountId)
    {
        var account = accounts.FirstOrDefault(a => a.AccountId == accountId);
        return account?.AccountName ?? "Unknown Account";
    }
}